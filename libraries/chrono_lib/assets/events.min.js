function HideField(field){field.closest(".field.holder")?field.closest(".field.holder").classList.add("hidden"):field.classList.add("hidden")}function ShowField(field){field.closest(".field.holder")?field.closest(".field.holder").classList.remove("hidden"):field.classList.remove("hidden")}function EnableField(field){field.closest(".field.holder")?field.closest(".field.holder").classList.remove("disabled"):field.classList.remove("disabled"),field.disabled=!1}function DisableField(field){field.closest(".field.holder")?field.closest(".field.holder").classList.add("disabled"):field.classList.add("disabled"),field.disabled=!0}function DisableValidation(field){field.setAttribute("disable-validations","1"),field.closest(".field.holder").classList.remove("error"),field.closest(".field.holder").querySelector(".errormsg")&&field.closest(".field.holder").querySelector(".errormsg").remove(),field.closest(".field.holder").querySelector(".errormark")&&field.closest(".field.holder").querySelector(".errormark").classList.add("hidden")}function EnableValidation(field){field.removeAttribute("disable-validations"),field.closest(".field.holder").querySelector(".errormark")&&field.closest(".field.holder").querySelector(".errormark").classList.remove("hidden")}function CallFunction(name,field){"function"==typeof window[name]&&window[name](field)}function SetValue(field,values){field.value=values[0]}function ClearValue(field){field.value=""}function SubmitForm(field){field.closest("form").submit()}function SelectAll(checksone){document.querySelectorAll("input[name='"+checksone.getAttribute("name")+"']").forEach(check=>{Nui.Checkbox.getInstance(check.closest(".nui.checkbox")).toggle()})}function AJAX(field,url){field.closest("form").classList.add("loading");let postBody=new FormData(field.closest("form"));postBody.delete("chronopage");const xhttp=new XMLHttpRequest;xhttp.addEventListener("readystatechange",e=>{field.closest("form").classList.remove("loading"),4==e.target.readyState&&e.target.status}),xhttp.open("POST",url),xhttp.send(postBody)}function Reload(field,url){field.closest("form").classList.add("loading");let postBody=new FormData(field.closest("form"));postBody.delete("chronopage");const xhttp=new XMLHttpRequest;xhttp.addEventListener("readystatechange",e=>{if(field.closest("form").classList.remove("loading"),4==e.target.readyState&&200==e.target.status){let results=Nui.Core.create_element(e.target.responseText,!0);field.closest(".field.holder")?(Array.from(results).forEach(item=>{field.closest(".field.holder").before(item),Nui_boot(item)}),Nui.Form.getInstance(field.closest(".nui.form")).init(),field.closest(".field.holder").remove()):(Array.from(results).forEach(item=>{field.before(item),Nui_boot(item)}),Nui.Form.getInstance(field.closest(".nui.form")).init(),field.remove())}}),xhttp.open("POST",url),xhttp.send(postBody)}function LoadOptions(field,url){field.closest("form").classList.add("loading");let postBody=new FormData(field.closest("form"));postBody.delete("chronopage");const xhttp=new XMLHttpRequest;xhttp.addEventListener("readystatechange",e=>{if(field.closest("form").classList.remove("loading"),4==e.target.readyState&&200==e.target.status){let options=JSON.parse(e.target.responseText);field.querySelectorAll("option").forEach(option=>{option.remove()}),Array.isArray(options)&&(Object.keys(options).forEach(key=>{let opt=Nui.Core.create_element('<option value="'+options[key].value+'">'+options[key].text+"</option>");field.append(opt)}),Nui.Dropdown.getInstance(field).init())}}),xhttp.open("POST",url),xhttp.send(postBody)}function SetupEvent(field,event,fn){let fields=field.closest("form").querySelectorAll("[name='"+field.getAttribute("name")+"']");fields&&fields.forEach(f=>{f.addEventListener(event,e=>{fn()})})}function GetValues(field){let fields=field.closest("form").querySelectorAll("[name='"+field.getAttribute("name")+"']");if(fields){let values=[];return fields.forEach(f=>{"checkbox"==field.getAttribute("type")||"radio"==field.getAttribute("type")?f.checked&&values.push(f.value):f.value.length>0&&values.push(f.value)}),values}return[]}function isEmpty(field){let values;return 0==GetValues(field).length}function HasValue(field,tvalues){let values=GetValues(field),result=!1;return tvalues.forEach(v=>{values.includes(v)&&(result=!0)}),result}function Matches(field,regex){let values=GetValues(field),r;return new RegExp(regex).test(values[0])}